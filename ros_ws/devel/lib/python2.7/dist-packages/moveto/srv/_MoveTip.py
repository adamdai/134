# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveto/MoveTipRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import moveto.msg

class MoveTipRequest(genpy.Message):
  _md5sum = "1a08b6b99f95146724f64dfacea44be6"
  _type = "moveto/MoveTipRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


Tip     tip
float64 movetime

================================================================================
MSG: moveto/Tip
# Message of tip values
float64 x
float64 y
float64 z
#float64 pitch
#float64 roll
bool grip
"""
  __slots__ = ['tip','movetime']
  _slot_types = ['moveto/Tip','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tip,movetime

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveTipRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.tip is None:
        self.tip = moveto.msg.Tip()
      if self.movetime is None:
        self.movetime = 0.
    else:
      self.tip = moveto.msg.Tip()
      self.movetime = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3dBd().pack(_x.tip.x, _x.tip.y, _x.tip.z, _x.tip.grip, _x.movetime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.tip is None:
        self.tip = moveto.msg.Tip()
      end = 0
      _x = self
      start = end
      end += 33
      (_x.tip.x, _x.tip.y, _x.tip.z, _x.tip.grip, _x.movetime,) = _get_struct_3dBd().unpack(str[start:end])
      self.tip.grip = bool(self.tip.grip)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3dBd().pack(_x.tip.x, _x.tip.y, _x.tip.z, _x.tip.grip, _x.movetime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.tip is None:
        self.tip = moveto.msg.Tip()
      end = 0
      _x = self
      start = end
      end += 33
      (_x.tip.x, _x.tip.y, _x.tip.z, _x.tip.grip, _x.movetime,) = _get_struct_3dBd().unpack(str[start:end])
      self.tip.grip = bool(self.tip.grip)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3dBd = None
def _get_struct_3dBd():
    global _struct_3dBd
    if _struct_3dBd is None:
        _struct_3dBd = struct.Struct("<3dBd")
    return _struct_3dBd
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveto/MoveTipResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MoveTipResponse(genpy.Message):
  _md5sum = "6d0a2b9ab4bb8369a38e876cace8b333"
  _type = "moveto/MoveTipResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float64 movetime

"""
  __slots__ = ['movetime']
  _slot_types = ['float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       movetime

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveTipResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.movetime is None:
        self.movetime = 0.
    else:
      self.movetime = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_d().pack(self.movetime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 8
      (self.movetime,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_d().pack(self.movetime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 8
      (self.movetime,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
class MoveTip(object):
  _type          = 'moveto/MoveTip'
  _md5sum = 'd8b70359542abe8c9014a48d2925814e'
  _request_class  = MoveTipRequest
  _response_class = MoveTipResponse
