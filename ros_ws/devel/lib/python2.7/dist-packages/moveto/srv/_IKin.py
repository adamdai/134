# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveto/IKinRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import moveto.msg

class IKinRequest(genpy.Message):
  _md5sum = "8cbaf4d4c4662d317de5c178f210e33f"
  _type = "moveto/IKinRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


Tip     tip

================================================================================
MSG: moveto/Tip
# Message of tip values
float64 x
float64 y
float64 z
float64 pitch
float64 roll
"""
  __slots__ = ['tip']
  _slot_types = ['moveto/Tip']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tip

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IKinRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.tip is None:
        self.tip = moveto.msg.Tip()
    else:
      self.tip = moveto.msg.Tip()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5d().pack(_x.tip.x, _x.tip.y, _x.tip.z, _x.tip.pitch, _x.tip.roll))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.tip is None:
        self.tip = moveto.msg.Tip()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.tip.x, _x.tip.y, _x.tip.z, _x.tip.pitch, _x.tip.roll,) = _get_struct_5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5d().pack(_x.tip.x, _x.tip.y, _x.tip.z, _x.tip.pitch, _x.tip.roll))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.tip is None:
        self.tip = moveto.msg.Tip()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.tip.x, _x.tip.y, _x.tip.z, _x.tip.pitch, _x.tip.roll,) = _get_struct_5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveto/IKinResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import moveto.msg

class IKinResponse(genpy.Message):
  _md5sum = "4b88afb7b371e9f0c4b005efd5498579"
  _type = "moveto/IKinResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


bool    singular
Joints  joints


================================================================================
MSG: moveto/Joints
# Message of joint values
float64[5] joint
"""
  __slots__ = ['singular','joints']
  _slot_types = ['bool','moveto/Joints']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       singular,joints

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IKinResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.singular is None:
        self.singular = False
      if self.joints is None:
        self.joints = moveto.msg.Joints()
    else:
      self.singular = False
      self.joints = moveto.msg.Joints()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.singular))
      buff.write(_get_struct_5d().pack(*self.joints.joint))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.joints is None:
        self.joints = moveto.msg.Joints()
      end = 0
      start = end
      end += 1
      (self.singular,) = _get_struct_B().unpack(str[start:end])
      self.singular = bool(self.singular)
      start = end
      end += 40
      self.joints.joint = _get_struct_5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.singular))
      buff.write(self.joints.joint.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.joints is None:
        self.joints = moveto.msg.Joints()
      end = 0
      start = end
      end += 1
      (self.singular,) = _get_struct_B().unpack(str[start:end])
      self.singular = bool(self.singular)
      start = end
      end += 40
      self.joints.joint = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=5)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class IKin(object):
  _type          = 'moveto/IKin'
  _md5sum = '1e8f025e4a7f0e73d00d1166f7ab7aff'
  _request_class  = IKinRequest
  _response_class = IKinResponse
