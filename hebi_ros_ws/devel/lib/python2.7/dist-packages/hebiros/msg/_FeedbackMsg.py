# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hebiros/FeedbackMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class FeedbackMsg(genpy.Message):
  _md5sum = "f4e368b929bb5d796beb629cf975333e"
  _type = "hebiros/FeedbackMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string[] name
float64[] position
float64[] velocity
float64[] effort
float64[] position_command
float64[] velocity_command
float64[] effort_command
geometry_msgs/Vector3[] accelerometer
geometry_msgs/Vector3[] gyro
geometry_msgs/Quaternion[] orientation
float64[] deflection
float64[] deflection_velocity
float64[] motor_velocity
float64[] motor_current
float64[] motor_winding_current
float64[] motor_sensor_temperature
float64[] motor_winding_temperature
float64[] motor_housing_temperature
float64[] board_temperature
float64[] processor_temperature
float64[] voltage
std_msgs/ColorRGBA[] led_color
uint64[] sequence_number
uint64[] receive_time
uint64[] transmit_time
uint64[] hardware_receive_time
uint64[] hardware_transmit_time


================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  __slots__ = ['name','position','velocity','effort','position_command','velocity_command','effort_command','accelerometer','gyro','orientation','deflection','deflection_velocity','motor_velocity','motor_current','motor_winding_current','motor_sensor_temperature','motor_winding_temperature','motor_housing_temperature','board_temperature','processor_temperature','voltage','led_color','sequence_number','receive_time','transmit_time','hardware_receive_time','hardware_transmit_time']
  _slot_types = ['string[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','geometry_msgs/Vector3[]','geometry_msgs/Vector3[]','geometry_msgs/Quaternion[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','std_msgs/ColorRGBA[]','uint64[]','uint64[]','uint64[]','uint64[]','uint64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,position,velocity,effort,position_command,velocity_command,effort_command,accelerometer,gyro,orientation,deflection,deflection_velocity,motor_velocity,motor_current,motor_winding_current,motor_sensor_temperature,motor_winding_temperature,motor_housing_temperature,board_temperature,processor_temperature,voltage,led_color,sequence_number,receive_time,transmit_time,hardware_receive_time,hardware_transmit_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FeedbackMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = []
      if self.position is None:
        self.position = []
      if self.velocity is None:
        self.velocity = []
      if self.effort is None:
        self.effort = []
      if self.position_command is None:
        self.position_command = []
      if self.velocity_command is None:
        self.velocity_command = []
      if self.effort_command is None:
        self.effort_command = []
      if self.accelerometer is None:
        self.accelerometer = []
      if self.gyro is None:
        self.gyro = []
      if self.orientation is None:
        self.orientation = []
      if self.deflection is None:
        self.deflection = []
      if self.deflection_velocity is None:
        self.deflection_velocity = []
      if self.motor_velocity is None:
        self.motor_velocity = []
      if self.motor_current is None:
        self.motor_current = []
      if self.motor_winding_current is None:
        self.motor_winding_current = []
      if self.motor_sensor_temperature is None:
        self.motor_sensor_temperature = []
      if self.motor_winding_temperature is None:
        self.motor_winding_temperature = []
      if self.motor_housing_temperature is None:
        self.motor_housing_temperature = []
      if self.board_temperature is None:
        self.board_temperature = []
      if self.processor_temperature is None:
        self.processor_temperature = []
      if self.voltage is None:
        self.voltage = []
      if self.led_color is None:
        self.led_color = []
      if self.sequence_number is None:
        self.sequence_number = []
      if self.receive_time is None:
        self.receive_time = []
      if self.transmit_time is None:
        self.transmit_time = []
      if self.hardware_receive_time is None:
        self.hardware_receive_time = []
      if self.hardware_transmit_time is None:
        self.hardware_transmit_time = []
    else:
      self.name = []
      self.position = []
      self.velocity = []
      self.effort = []
      self.position_command = []
      self.velocity_command = []
      self.effort_command = []
      self.accelerometer = []
      self.gyro = []
      self.orientation = []
      self.deflection = []
      self.deflection_velocity = []
      self.motor_velocity = []
      self.motor_current = []
      self.motor_winding_current = []
      self.motor_sensor_temperature = []
      self.motor_winding_temperature = []
      self.motor_housing_temperature = []
      self.board_temperature = []
      self.processor_temperature = []
      self.voltage = []
      self.led_color = []
      self.sequence_number = []
      self.receive_time = []
      self.transmit_time = []
      self.hardware_receive_time = []
      self.hardware_transmit_time = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position))
      length = len(self.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity))
      length = len(self.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.effort))
      length = len(self.position_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_command))
      length = len(self.velocity_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity_command))
      length = len(self.effort_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.effort_command))
      length = len(self.accelerometer)
      buff.write(_struct_I.pack(length))
      for val1 in self.accelerometer:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.gyro)
      buff.write(_struct_I.pack(length))
      for val1 in self.gyro:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.orientation)
      buff.write(_struct_I.pack(length))
      for val1 in self.orientation:
        _x = val1
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.deflection)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.deflection))
      length = len(self.deflection_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.deflection_velocity))
      length = len(self.motor_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.motor_velocity))
      length = len(self.motor_current)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.motor_current))
      length = len(self.motor_winding_current)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.motor_winding_current))
      length = len(self.motor_sensor_temperature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.motor_sensor_temperature))
      length = len(self.motor_winding_temperature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.motor_winding_temperature))
      length = len(self.motor_housing_temperature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.motor_housing_temperature))
      length = len(self.board_temperature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.board_temperature))
      length = len(self.processor_temperature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.processor_temperature))
      length = len(self.voltage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.voltage))
      length = len(self.led_color)
      buff.write(_struct_I.pack(length))
      for val1 in self.led_color:
        _x = val1
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.sequence_number)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.pack(pattern, *self.sequence_number))
      length = len(self.receive_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.pack(pattern, *self.receive_time))
      length = len(self.transmit_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.pack(pattern, *self.transmit_time))
      length = len(self.hardware_receive_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.pack(pattern, *self.hardware_receive_time))
      length = len(self.hardware_transmit_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.pack(pattern, *self.hardware_transmit_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.accelerometer is None:
        self.accelerometer = None
      if self.gyro is None:
        self.gyro = None
      if self.orientation is None:
        self.orientation = None
      if self.led_color is None:
        self.led_color = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_command = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_command = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_command = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.accelerometer = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.accelerometer.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.gyro = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.gyro.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.orientation = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Quaternion()
        _x = val1
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.orientation.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.deflection = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.deflection_velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor_velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor_current = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor_winding_current = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor_sensor_temperature = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor_winding_temperature = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor_housing_temperature = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.board_temperature = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.processor_temperature = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.voltage = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.led_color = []
      for i in range(0, length):
        val1 = std_msgs.msg.ColorRGBA()
        _x = val1
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.led_color.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.sequence_number = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.receive_time = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.transmit_time = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.hardware_receive_time = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.hardware_transmit_time = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position.tostring())
      length = len(self.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity.tostring())
      length = len(self.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.effort.tostring())
      length = len(self.position_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_command.tostring())
      length = len(self.velocity_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_command.tostring())
      length = len(self.effort_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.effort_command.tostring())
      length = len(self.accelerometer)
      buff.write(_struct_I.pack(length))
      for val1 in self.accelerometer:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.gyro)
      buff.write(_struct_I.pack(length))
      for val1 in self.gyro:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.orientation)
      buff.write(_struct_I.pack(length))
      for val1 in self.orientation:
        _x = val1
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.deflection)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.deflection.tostring())
      length = len(self.deflection_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.deflection_velocity.tostring())
      length = len(self.motor_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.motor_velocity.tostring())
      length = len(self.motor_current)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.motor_current.tostring())
      length = len(self.motor_winding_current)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.motor_winding_current.tostring())
      length = len(self.motor_sensor_temperature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.motor_sensor_temperature.tostring())
      length = len(self.motor_winding_temperature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.motor_winding_temperature.tostring())
      length = len(self.motor_housing_temperature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.motor_housing_temperature.tostring())
      length = len(self.board_temperature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.board_temperature.tostring())
      length = len(self.processor_temperature)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.processor_temperature.tostring())
      length = len(self.voltage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.voltage.tostring())
      length = len(self.led_color)
      buff.write(_struct_I.pack(length))
      for val1 in self.led_color:
        _x = val1
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.sequence_number)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.sequence_number.tostring())
      length = len(self.receive_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.receive_time.tostring())
      length = len(self.transmit_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.transmit_time.tostring())
      length = len(self.hardware_receive_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.hardware_receive_time.tostring())
      length = len(self.hardware_transmit_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.hardware_transmit_time.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.accelerometer is None:
        self.accelerometer = None
      if self.gyro is None:
        self.gyro = None
      if self.orientation is None:
        self.orientation = None
      if self.led_color is None:
        self.led_color = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_command = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_command = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_command = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.accelerometer = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.accelerometer.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.gyro = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.gyro.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.orientation = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Quaternion()
        _x = val1
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.orientation.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.deflection = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.deflection_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor_current = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor_winding_current = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor_sensor_temperature = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor_winding_temperature = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.motor_housing_temperature = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.board_temperature = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.processor_temperature = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.voltage = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.led_color = []
      for i in range(0, length):
        val1 = std_msgs.msg.ColorRGBA()
        _x = val1
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.led_color.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.sequence_number = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.receive_time = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.transmit_time = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.hardware_receive_time = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      end += struct.calcsize(pattern)
      self.hardware_transmit_time = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
