# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hebiros/SettingsMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hebiros.msg

class SettingsMsg(genpy.Message):
  _md5sum = "4333c3b24c39f74ad09d675d9b50f596"
  _type = "hebiros/SettingsMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string[] name
bool[] save_current_settings
int8[] control_strategy
hebiros/PidGainsMsg position_gains
hebiros/PidGainsMsg velocity_gains
hebiros/PidGainsMsg effort_gains


================================================================================
MSG: hebiros/PidGainsMsg
string[] name
float64[] kp
float64[] ki
float64[] kd
float64[] feed_forward
float64[] dead_zone
float64[] i_clamp
float64[] punch
float64[] min_target
float64[] max_target
float64[] target_lowpass
float64[] min_output
float64[] max_output
float64[] output_lowpass
bool[] d_on_error

"""
  __slots__ = ['name','save_current_settings','control_strategy','position_gains','velocity_gains','effort_gains']
  _slot_types = ['string[]','bool[]','int8[]','hebiros/PidGainsMsg','hebiros/PidGainsMsg','hebiros/PidGainsMsg']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,save_current_settings,control_strategy,position_gains,velocity_gains,effort_gains

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SettingsMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = []
      if self.save_current_settings is None:
        self.save_current_settings = []
      if self.control_strategy is None:
        self.control_strategy = []
      if self.position_gains is None:
        self.position_gains = hebiros.msg.PidGainsMsg()
      if self.velocity_gains is None:
        self.velocity_gains = hebiros.msg.PidGainsMsg()
      if self.effort_gains is None:
        self.effort_gains = hebiros.msg.PidGainsMsg()
    else:
      self.name = []
      self.save_current_settings = []
      self.control_strategy = []
      self.position_gains = hebiros.msg.PidGainsMsg()
      self.velocity_gains = hebiros.msg.PidGainsMsg()
      self.effort_gains = hebiros.msg.PidGainsMsg()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.save_current_settings)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.save_current_settings))
      length = len(self.control_strategy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.control_strategy))
      length = len(self.position_gains.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.position_gains.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.position_gains.kp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_gains.kp))
      length = len(self.position_gains.ki)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_gains.ki))
      length = len(self.position_gains.kd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_gains.kd))
      length = len(self.position_gains.feed_forward)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_gains.feed_forward))
      length = len(self.position_gains.dead_zone)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_gains.dead_zone))
      length = len(self.position_gains.i_clamp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_gains.i_clamp))
      length = len(self.position_gains.punch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_gains.punch))
      length = len(self.position_gains.min_target)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_gains.min_target))
      length = len(self.position_gains.max_target)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_gains.max_target))
      length = len(self.position_gains.target_lowpass)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_gains.target_lowpass))
      length = len(self.position_gains.min_output)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_gains.min_output))
      length = len(self.position_gains.max_output)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_gains.max_output))
      length = len(self.position_gains.output_lowpass)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_gains.output_lowpass))
      length = len(self.position_gains.d_on_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.position_gains.d_on_error))
      length = len(self.velocity_gains.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.velocity_gains.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.velocity_gains.kp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity_gains.kp))
      length = len(self.velocity_gains.ki)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity_gains.ki))
      length = len(self.velocity_gains.kd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity_gains.kd))
      length = len(self.velocity_gains.feed_forward)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity_gains.feed_forward))
      length = len(self.velocity_gains.dead_zone)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity_gains.dead_zone))
      length = len(self.velocity_gains.i_clamp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity_gains.i_clamp))
      length = len(self.velocity_gains.punch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity_gains.punch))
      length = len(self.velocity_gains.min_target)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity_gains.min_target))
      length = len(self.velocity_gains.max_target)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity_gains.max_target))
      length = len(self.velocity_gains.target_lowpass)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity_gains.target_lowpass))
      length = len(self.velocity_gains.min_output)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity_gains.min_output))
      length = len(self.velocity_gains.max_output)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity_gains.max_output))
      length = len(self.velocity_gains.output_lowpass)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity_gains.output_lowpass))
      length = len(self.velocity_gains.d_on_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.velocity_gains.d_on_error))
      length = len(self.effort_gains.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.effort_gains.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.effort_gains.kp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.effort_gains.kp))
      length = len(self.effort_gains.ki)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.effort_gains.ki))
      length = len(self.effort_gains.kd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.effort_gains.kd))
      length = len(self.effort_gains.feed_forward)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.effort_gains.feed_forward))
      length = len(self.effort_gains.dead_zone)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.effort_gains.dead_zone))
      length = len(self.effort_gains.i_clamp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.effort_gains.i_clamp))
      length = len(self.effort_gains.punch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.effort_gains.punch))
      length = len(self.effort_gains.min_target)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.effort_gains.min_target))
      length = len(self.effort_gains.max_target)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.effort_gains.max_target))
      length = len(self.effort_gains.target_lowpass)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.effort_gains.target_lowpass))
      length = len(self.effort_gains.min_output)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.effort_gains.min_output))
      length = len(self.effort_gains.max_output)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.effort_gains.max_output))
      length = len(self.effort_gains.output_lowpass)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.effort_gains.output_lowpass))
      length = len(self.effort_gains.d_on_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.effort_gains.d_on_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position_gains is None:
        self.position_gains = hebiros.msg.PidGainsMsg()
      if self.velocity_gains is None:
        self.velocity_gains = hebiros.msg.PidGainsMsg()
      if self.effort_gains is None:
        self.effort_gains = hebiros.msg.PidGainsMsg()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.save_current_settings = struct.unpack(pattern, str[start:end])
      self.save_current_settings = map(bool, self.save_current_settings)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.control_strategy = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.position_gains.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.position_gains.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.kp = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.ki = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.kd = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.feed_forward = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.dead_zone = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.i_clamp = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.punch = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.min_target = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.max_target = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.target_lowpass = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.min_output = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.max_output = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.output_lowpass = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.d_on_error = struct.unpack(pattern, str[start:end])
      self.position_gains.d_on_error = map(bool, self.position_gains.d_on_error)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.velocity_gains.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.velocity_gains.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.kp = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.ki = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.kd = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.feed_forward = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.dead_zone = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.i_clamp = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.punch = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.min_target = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.max_target = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.target_lowpass = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.min_output = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.max_output = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.output_lowpass = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.d_on_error = struct.unpack(pattern, str[start:end])
      self.velocity_gains.d_on_error = map(bool, self.velocity_gains.d_on_error)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.effort_gains.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.effort_gains.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.kp = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.ki = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.kd = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.feed_forward = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.dead_zone = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.i_clamp = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.punch = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.min_target = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.max_target = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.target_lowpass = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.min_output = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.max_output = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.output_lowpass = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.d_on_error = struct.unpack(pattern, str[start:end])
      self.effort_gains.d_on_error = map(bool, self.effort_gains.d_on_error)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.save_current_settings)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.save_current_settings.tostring())
      length = len(self.control_strategy)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.control_strategy.tostring())
      length = len(self.position_gains.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.position_gains.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.position_gains.kp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_gains.kp.tostring())
      length = len(self.position_gains.ki)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_gains.ki.tostring())
      length = len(self.position_gains.kd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_gains.kd.tostring())
      length = len(self.position_gains.feed_forward)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_gains.feed_forward.tostring())
      length = len(self.position_gains.dead_zone)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_gains.dead_zone.tostring())
      length = len(self.position_gains.i_clamp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_gains.i_clamp.tostring())
      length = len(self.position_gains.punch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_gains.punch.tostring())
      length = len(self.position_gains.min_target)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_gains.min_target.tostring())
      length = len(self.position_gains.max_target)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_gains.max_target.tostring())
      length = len(self.position_gains.target_lowpass)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_gains.target_lowpass.tostring())
      length = len(self.position_gains.min_output)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_gains.min_output.tostring())
      length = len(self.position_gains.max_output)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_gains.max_output.tostring())
      length = len(self.position_gains.output_lowpass)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_gains.output_lowpass.tostring())
      length = len(self.position_gains.d_on_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.position_gains.d_on_error.tostring())
      length = len(self.velocity_gains.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.velocity_gains.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.velocity_gains.kp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_gains.kp.tostring())
      length = len(self.velocity_gains.ki)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_gains.ki.tostring())
      length = len(self.velocity_gains.kd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_gains.kd.tostring())
      length = len(self.velocity_gains.feed_forward)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_gains.feed_forward.tostring())
      length = len(self.velocity_gains.dead_zone)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_gains.dead_zone.tostring())
      length = len(self.velocity_gains.i_clamp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_gains.i_clamp.tostring())
      length = len(self.velocity_gains.punch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_gains.punch.tostring())
      length = len(self.velocity_gains.min_target)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_gains.min_target.tostring())
      length = len(self.velocity_gains.max_target)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_gains.max_target.tostring())
      length = len(self.velocity_gains.target_lowpass)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_gains.target_lowpass.tostring())
      length = len(self.velocity_gains.min_output)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_gains.min_output.tostring())
      length = len(self.velocity_gains.max_output)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_gains.max_output.tostring())
      length = len(self.velocity_gains.output_lowpass)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity_gains.output_lowpass.tostring())
      length = len(self.velocity_gains.d_on_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.velocity_gains.d_on_error.tostring())
      length = len(self.effort_gains.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.effort_gains.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.effort_gains.kp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.effort_gains.kp.tostring())
      length = len(self.effort_gains.ki)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.effort_gains.ki.tostring())
      length = len(self.effort_gains.kd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.effort_gains.kd.tostring())
      length = len(self.effort_gains.feed_forward)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.effort_gains.feed_forward.tostring())
      length = len(self.effort_gains.dead_zone)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.effort_gains.dead_zone.tostring())
      length = len(self.effort_gains.i_clamp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.effort_gains.i_clamp.tostring())
      length = len(self.effort_gains.punch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.effort_gains.punch.tostring())
      length = len(self.effort_gains.min_target)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.effort_gains.min_target.tostring())
      length = len(self.effort_gains.max_target)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.effort_gains.max_target.tostring())
      length = len(self.effort_gains.target_lowpass)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.effort_gains.target_lowpass.tostring())
      length = len(self.effort_gains.min_output)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.effort_gains.min_output.tostring())
      length = len(self.effort_gains.max_output)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.effort_gains.max_output.tostring())
      length = len(self.effort_gains.output_lowpass)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.effort_gains.output_lowpass.tostring())
      length = len(self.effort_gains.d_on_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.effort_gains.d_on_error.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position_gains is None:
        self.position_gains = hebiros.msg.PidGainsMsg()
      if self.velocity_gains is None:
        self.velocity_gains = hebiros.msg.PidGainsMsg()
      if self.effort_gains is None:
        self.effort_gains = hebiros.msg.PidGainsMsg()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.save_current_settings = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.save_current_settings = map(bool, self.save_current_settings)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.control_strategy = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.position_gains.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.position_gains.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.kp = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.ki = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.kd = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.feed_forward = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.dead_zone = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.i_clamp = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.punch = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.min_target = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.max_target = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.target_lowpass = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.min_output = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.max_output = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.output_lowpass = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_gains.d_on_error = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.position_gains.d_on_error = map(bool, self.position_gains.d_on_error)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.velocity_gains.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.velocity_gains.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.kp = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.ki = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.kd = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.feed_forward = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.dead_zone = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.i_clamp = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.punch = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.min_target = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.max_target = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.target_lowpass = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.min_output = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.max_output = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.output_lowpass = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity_gains.d_on_error = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.velocity_gains.d_on_error = map(bool, self.velocity_gains.d_on_error)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.effort_gains.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.effort_gains.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.kp = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.ki = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.kd = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.feed_forward = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.dead_zone = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.i_clamp = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.punch = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.min_target = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.max_target = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.target_lowpass = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.min_output = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.max_output = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.output_lowpass = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort_gains.d_on_error = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.effort_gains.d_on_error = map(bool, self.effort_gains.d_on_error)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
