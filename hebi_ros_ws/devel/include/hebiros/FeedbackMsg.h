// Generated by gencpp from file hebiros/FeedbackMsg.msg
// DO NOT EDIT!


#ifndef HEBIROS_MESSAGE_FEEDBACKMSG_H
#define HEBIROS_MESSAGE_FEEDBACKMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Quaternion.h>
#include <std_msgs/ColorRGBA.h>

namespace hebiros
{
template <class ContainerAllocator>
struct FeedbackMsg_
{
  typedef FeedbackMsg_<ContainerAllocator> Type;

  FeedbackMsg_()
    : name()
    , position()
    , velocity()
    , effort()
    , position_command()
    , velocity_command()
    , effort_command()
    , accelerometer()
    , gyro()
    , orientation()
    , deflection()
    , deflection_velocity()
    , motor_velocity()
    , motor_current()
    , motor_winding_current()
    , motor_sensor_temperature()
    , motor_winding_temperature()
    , motor_housing_temperature()
    , board_temperature()
    , processor_temperature()
    , voltage()
    , led_color()
    , sequence_number()
    , receive_time()
    , transmit_time()
    , hardware_receive_time()
    , hardware_transmit_time()  {
    }
  FeedbackMsg_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , position(_alloc)
    , velocity(_alloc)
    , effort(_alloc)
    , position_command(_alloc)
    , velocity_command(_alloc)
    , effort_command(_alloc)
    , accelerometer(_alloc)
    , gyro(_alloc)
    , orientation(_alloc)
    , deflection(_alloc)
    , deflection_velocity(_alloc)
    , motor_velocity(_alloc)
    , motor_current(_alloc)
    , motor_winding_current(_alloc)
    , motor_sensor_temperature(_alloc)
    , motor_winding_temperature(_alloc)
    , motor_housing_temperature(_alloc)
    , board_temperature(_alloc)
    , processor_temperature(_alloc)
    , voltage(_alloc)
    , led_color(_alloc)
    , sequence_number(_alloc)
    , receive_time(_alloc)
    , transmit_time(_alloc)
    , hardware_receive_time(_alloc)
    , hardware_transmit_time(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_type;
  _position_type position;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _velocity_type;
  _velocity_type velocity;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _effort_type;
  _effort_type effort;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_command_type;
  _position_command_type position_command;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _velocity_command_type;
  _velocity_command_type velocity_command;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _effort_command_type;
  _effort_command_type effort_command;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _accelerometer_type;
  _accelerometer_type accelerometer;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _gyro_type;
  _gyro_type gyro;

   typedef std::vector< ::geometry_msgs::Quaternion_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Quaternion_<ContainerAllocator> >::other >  _orientation_type;
  _orientation_type orientation;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _deflection_type;
  _deflection_type deflection;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _deflection_velocity_type;
  _deflection_velocity_type deflection_velocity;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _motor_velocity_type;
  _motor_velocity_type motor_velocity;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _motor_current_type;
  _motor_current_type motor_current;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _motor_winding_current_type;
  _motor_winding_current_type motor_winding_current;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _motor_sensor_temperature_type;
  _motor_sensor_temperature_type motor_sensor_temperature;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _motor_winding_temperature_type;
  _motor_winding_temperature_type motor_winding_temperature;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _motor_housing_temperature_type;
  _motor_housing_temperature_type motor_housing_temperature;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _board_temperature_type;
  _board_temperature_type board_temperature;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _processor_temperature_type;
  _processor_temperature_type processor_temperature;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _voltage_type;
  _voltage_type voltage;

   typedef std::vector< ::std_msgs::ColorRGBA_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::ColorRGBA_<ContainerAllocator> >::other >  _led_color_type;
  _led_color_type led_color;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _sequence_number_type;
  _sequence_number_type sequence_number;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _receive_time_type;
  _receive_time_type receive_time;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _transmit_time_type;
  _transmit_time_type transmit_time;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _hardware_receive_time_type;
  _hardware_receive_time_type hardware_receive_time;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _hardware_transmit_time_type;
  _hardware_transmit_time_type hardware_transmit_time;





  typedef boost::shared_ptr< ::hebiros::FeedbackMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hebiros::FeedbackMsg_<ContainerAllocator> const> ConstPtr;

}; // struct FeedbackMsg_

typedef ::hebiros::FeedbackMsg_<std::allocator<void> > FeedbackMsg;

typedef boost::shared_ptr< ::hebiros::FeedbackMsg > FeedbackMsgPtr;
typedef boost::shared_ptr< ::hebiros::FeedbackMsg const> FeedbackMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hebiros::FeedbackMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hebiros::FeedbackMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hebiros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'hebiros': ['/home/robot/hebi_ros_ws/src/hebiros/hebiros/msg', '/home/robot/hebi_ros_ws/devel/share/hebiros/msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hebiros::FeedbackMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hebiros::FeedbackMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hebiros::FeedbackMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hebiros::FeedbackMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hebiros::FeedbackMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hebiros::FeedbackMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hebiros::FeedbackMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4e368b929bb5d796beb629cf975333e";
  }

  static const char* value(const ::hebiros::FeedbackMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4e368b929bb5d79ULL;
  static const uint64_t static_value2 = 0x6beb629cf975333eULL;
};

template<class ContainerAllocator>
struct DataType< ::hebiros::FeedbackMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hebiros/FeedbackMsg";
  }

  static const char* value(const ::hebiros::FeedbackMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hebiros::FeedbackMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
float64[] position_command\n\
float64[] velocity_command\n\
float64[] effort_command\n\
geometry_msgs/Vector3[] accelerometer\n\
geometry_msgs/Vector3[] gyro\n\
geometry_msgs/Quaternion[] orientation\n\
float64[] deflection\n\
float64[] deflection_velocity\n\
float64[] motor_velocity\n\
float64[] motor_current\n\
float64[] motor_winding_current\n\
float64[] motor_sensor_temperature\n\
float64[] motor_winding_temperature\n\
float64[] motor_housing_temperature\n\
float64[] board_temperature\n\
float64[] processor_temperature\n\
float64[] voltage\n\
std_msgs/ColorRGBA[] led_color\n\
uint64[] sequence_number\n\
uint64[] receive_time\n\
uint64[] transmit_time\n\
uint64[] hardware_receive_time\n\
uint64[] hardware_transmit_time\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: std_msgs/ColorRGBA\n\
float32 r\n\
float32 g\n\
float32 b\n\
float32 a\n\
";
  }

  static const char* value(const ::hebiros::FeedbackMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hebiros::FeedbackMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.effort);
      stream.next(m.position_command);
      stream.next(m.velocity_command);
      stream.next(m.effort_command);
      stream.next(m.accelerometer);
      stream.next(m.gyro);
      stream.next(m.orientation);
      stream.next(m.deflection);
      stream.next(m.deflection_velocity);
      stream.next(m.motor_velocity);
      stream.next(m.motor_current);
      stream.next(m.motor_winding_current);
      stream.next(m.motor_sensor_temperature);
      stream.next(m.motor_winding_temperature);
      stream.next(m.motor_housing_temperature);
      stream.next(m.board_temperature);
      stream.next(m.processor_temperature);
      stream.next(m.voltage);
      stream.next(m.led_color);
      stream.next(m.sequence_number);
      stream.next(m.receive_time);
      stream.next(m.transmit_time);
      stream.next(m.hardware_receive_time);
      stream.next(m.hardware_transmit_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FeedbackMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hebiros::FeedbackMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hebiros::FeedbackMsg_<ContainerAllocator>& v)
  {
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "effort[]" << std::endl;
    for (size_t i = 0; i < v.effort.size(); ++i)
    {
      s << indent << "  effort[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.effort[i]);
    }
    s << indent << "position_command[]" << std::endl;
    for (size_t i = 0; i < v.position_command.size(); ++i)
    {
      s << indent << "  position_command[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_command[i]);
    }
    s << indent << "velocity_command[]" << std::endl;
    for (size_t i = 0; i < v.velocity_command.size(); ++i)
    {
      s << indent << "  velocity_command[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity_command[i]);
    }
    s << indent << "effort_command[]" << std::endl;
    for (size_t i = 0; i < v.effort_command.size(); ++i)
    {
      s << indent << "  effort_command[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.effort_command[i]);
    }
    s << indent << "accelerometer[]" << std::endl;
    for (size_t i = 0; i < v.accelerometer.size(); ++i)
    {
      s << indent << "  accelerometer[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.accelerometer[i]);
    }
    s << indent << "gyro[]" << std::endl;
    for (size_t i = 0; i < v.gyro.size(); ++i)
    {
      s << indent << "  gyro[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.gyro[i]);
    }
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "    ", v.orientation[i]);
    }
    s << indent << "deflection[]" << std::endl;
    for (size_t i = 0; i < v.deflection.size(); ++i)
    {
      s << indent << "  deflection[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.deflection[i]);
    }
    s << indent << "deflection_velocity[]" << std::endl;
    for (size_t i = 0; i < v.deflection_velocity.size(); ++i)
    {
      s << indent << "  deflection_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.deflection_velocity[i]);
    }
    s << indent << "motor_velocity[]" << std::endl;
    for (size_t i = 0; i < v.motor_velocity.size(); ++i)
    {
      s << indent << "  motor_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.motor_velocity[i]);
    }
    s << indent << "motor_current[]" << std::endl;
    for (size_t i = 0; i < v.motor_current.size(); ++i)
    {
      s << indent << "  motor_current[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.motor_current[i]);
    }
    s << indent << "motor_winding_current[]" << std::endl;
    for (size_t i = 0; i < v.motor_winding_current.size(); ++i)
    {
      s << indent << "  motor_winding_current[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.motor_winding_current[i]);
    }
    s << indent << "motor_sensor_temperature[]" << std::endl;
    for (size_t i = 0; i < v.motor_sensor_temperature.size(); ++i)
    {
      s << indent << "  motor_sensor_temperature[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.motor_sensor_temperature[i]);
    }
    s << indent << "motor_winding_temperature[]" << std::endl;
    for (size_t i = 0; i < v.motor_winding_temperature.size(); ++i)
    {
      s << indent << "  motor_winding_temperature[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.motor_winding_temperature[i]);
    }
    s << indent << "motor_housing_temperature[]" << std::endl;
    for (size_t i = 0; i < v.motor_housing_temperature.size(); ++i)
    {
      s << indent << "  motor_housing_temperature[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.motor_housing_temperature[i]);
    }
    s << indent << "board_temperature[]" << std::endl;
    for (size_t i = 0; i < v.board_temperature.size(); ++i)
    {
      s << indent << "  board_temperature[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.board_temperature[i]);
    }
    s << indent << "processor_temperature[]" << std::endl;
    for (size_t i = 0; i < v.processor_temperature.size(); ++i)
    {
      s << indent << "  processor_temperature[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.processor_temperature[i]);
    }
    s << indent << "voltage[]" << std::endl;
    for (size_t i = 0; i < v.voltage.size(); ++i)
    {
      s << indent << "  voltage[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.voltage[i]);
    }
    s << indent << "led_color[]" << std::endl;
    for (size_t i = 0; i < v.led_color.size(); ++i)
    {
      s << indent << "  led_color[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "    ", v.led_color[i]);
    }
    s << indent << "sequence_number[]" << std::endl;
    for (size_t i = 0; i < v.sequence_number.size(); ++i)
    {
      s << indent << "  sequence_number[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.sequence_number[i]);
    }
    s << indent << "receive_time[]" << std::endl;
    for (size_t i = 0; i < v.receive_time.size(); ++i)
    {
      s << indent << "  receive_time[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.receive_time[i]);
    }
    s << indent << "transmit_time[]" << std::endl;
    for (size_t i = 0; i < v.transmit_time.size(); ++i)
    {
      s << indent << "  transmit_time[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.transmit_time[i]);
    }
    s << indent << "hardware_receive_time[]" << std::endl;
    for (size_t i = 0; i < v.hardware_receive_time.size(); ++i)
    {
      s << indent << "  hardware_receive_time[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.hardware_receive_time[i]);
    }
    s << indent << "hardware_transmit_time[]" << std::endl;
    for (size_t i = 0; i < v.hardware_transmit_time.size(); ++i)
    {
      s << indent << "  hardware_transmit_time[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.hardware_transmit_time[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEBIROS_MESSAGE_FEEDBACKMSG_H
