// Generated by gencpp from file hebiros/PidGainsMsg.msg
// DO NOT EDIT!


#ifndef HEBIROS_MESSAGE_PIDGAINSMSG_H
#define HEBIROS_MESSAGE_PIDGAINSMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hebiros
{
template <class ContainerAllocator>
struct PidGainsMsg_
{
  typedef PidGainsMsg_<ContainerAllocator> Type;

  PidGainsMsg_()
    : name()
    , kp()
    , ki()
    , kd()
    , feed_forward()
    , dead_zone()
    , i_clamp()
    , punch()
    , min_target()
    , max_target()
    , target_lowpass()
    , min_output()
    , max_output()
    , output_lowpass()
    , d_on_error()  {
    }
  PidGainsMsg_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , kp(_alloc)
    , ki(_alloc)
    , kd(_alloc)
    , feed_forward(_alloc)
    , dead_zone(_alloc)
    , i_clamp(_alloc)
    , punch(_alloc)
    , min_target(_alloc)
    , max_target(_alloc)
    , target_lowpass(_alloc)
    , min_output(_alloc)
    , max_output(_alloc)
    , output_lowpass(_alloc)
    , d_on_error(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _kp_type;
  _kp_type kp;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ki_type;
  _ki_type ki;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _kd_type;
  _kd_type kd;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _feed_forward_type;
  _feed_forward_type feed_forward;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _dead_zone_type;
  _dead_zone_type dead_zone;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _i_clamp_type;
  _i_clamp_type i_clamp;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _punch_type;
  _punch_type punch;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _min_target_type;
  _min_target_type min_target;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _max_target_type;
  _max_target_type max_target;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _target_lowpass_type;
  _target_lowpass_type target_lowpass;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _min_output_type;
  _min_output_type min_output;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _max_output_type;
  _max_output_type max_output;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _output_lowpass_type;
  _output_lowpass_type output_lowpass;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _d_on_error_type;
  _d_on_error_type d_on_error;





  typedef boost::shared_ptr< ::hebiros::PidGainsMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hebiros::PidGainsMsg_<ContainerAllocator> const> ConstPtr;

}; // struct PidGainsMsg_

typedef ::hebiros::PidGainsMsg_<std::allocator<void> > PidGainsMsg;

typedef boost::shared_ptr< ::hebiros::PidGainsMsg > PidGainsMsgPtr;
typedef boost::shared_ptr< ::hebiros::PidGainsMsg const> PidGainsMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hebiros::PidGainsMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hebiros::PidGainsMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hebiros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'hebiros': ['/home/robot/hebi_ros_ws/src/hebiros/hebiros/msg', '/home/robot/hebi_ros_ws/devel/share/hebiros/msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hebiros::PidGainsMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hebiros::PidGainsMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hebiros::PidGainsMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hebiros::PidGainsMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hebiros::PidGainsMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hebiros::PidGainsMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hebiros::PidGainsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "409cfb8df90bde199674774f996b26c5";
  }

  static const char* value(const ::hebiros::PidGainsMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x409cfb8df90bde19ULL;
  static const uint64_t static_value2 = 0x9674774f996b26c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::hebiros::PidGainsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hebiros/PidGainsMsg";
  }

  static const char* value(const ::hebiros::PidGainsMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hebiros::PidGainsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] name\n\
float64[] kp\n\
float64[] ki\n\
float64[] kd\n\
float64[] feed_forward\n\
float64[] dead_zone\n\
float64[] i_clamp\n\
float64[] punch\n\
float64[] min_target\n\
float64[] max_target\n\
float64[] target_lowpass\n\
float64[] min_output\n\
float64[] max_output\n\
float64[] output_lowpass\n\
bool[] d_on_error\n\
\n\
";
  }

  static const char* value(const ::hebiros::PidGainsMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hebiros::PidGainsMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.kp);
      stream.next(m.ki);
      stream.next(m.kd);
      stream.next(m.feed_forward);
      stream.next(m.dead_zone);
      stream.next(m.i_clamp);
      stream.next(m.punch);
      stream.next(m.min_target);
      stream.next(m.max_target);
      stream.next(m.target_lowpass);
      stream.next(m.min_output);
      stream.next(m.max_output);
      stream.next(m.output_lowpass);
      stream.next(m.d_on_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PidGainsMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hebiros::PidGainsMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hebiros::PidGainsMsg_<ContainerAllocator>& v)
  {
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "kp[]" << std::endl;
    for (size_t i = 0; i < v.kp.size(); ++i)
    {
      s << indent << "  kp[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.kp[i]);
    }
    s << indent << "ki[]" << std::endl;
    for (size_t i = 0; i < v.ki.size(); ++i)
    {
      s << indent << "  ki[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ki[i]);
    }
    s << indent << "kd[]" << std::endl;
    for (size_t i = 0; i < v.kd.size(); ++i)
    {
      s << indent << "  kd[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.kd[i]);
    }
    s << indent << "feed_forward[]" << std::endl;
    for (size_t i = 0; i < v.feed_forward.size(); ++i)
    {
      s << indent << "  feed_forward[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.feed_forward[i]);
    }
    s << indent << "dead_zone[]" << std::endl;
    for (size_t i = 0; i < v.dead_zone.size(); ++i)
    {
      s << indent << "  dead_zone[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dead_zone[i]);
    }
    s << indent << "i_clamp[]" << std::endl;
    for (size_t i = 0; i < v.i_clamp.size(); ++i)
    {
      s << indent << "  i_clamp[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.i_clamp[i]);
    }
    s << indent << "punch[]" << std::endl;
    for (size_t i = 0; i < v.punch.size(); ++i)
    {
      s << indent << "  punch[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.punch[i]);
    }
    s << indent << "min_target[]" << std::endl;
    for (size_t i = 0; i < v.min_target.size(); ++i)
    {
      s << indent << "  min_target[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.min_target[i]);
    }
    s << indent << "max_target[]" << std::endl;
    for (size_t i = 0; i < v.max_target.size(); ++i)
    {
      s << indent << "  max_target[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.max_target[i]);
    }
    s << indent << "target_lowpass[]" << std::endl;
    for (size_t i = 0; i < v.target_lowpass.size(); ++i)
    {
      s << indent << "  target_lowpass[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.target_lowpass[i]);
    }
    s << indent << "min_output[]" << std::endl;
    for (size_t i = 0; i < v.min_output.size(); ++i)
    {
      s << indent << "  min_output[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.min_output[i]);
    }
    s << indent << "max_output[]" << std::endl;
    for (size_t i = 0; i < v.max_output.size(); ++i)
    {
      s << indent << "  max_output[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.max_output[i]);
    }
    s << indent << "output_lowpass[]" << std::endl;
    for (size_t i = 0; i < v.output_lowpass.size(); ++i)
    {
      s << indent << "  output_lowpass[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.output_lowpass[i]);
    }
    s << indent << "d_on_error[]" << std::endl;
    for (size_t i = 0; i < v.d_on_error.size(); ++i)
    {
      s << indent << "  d_on_error[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.d_on_error[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEBIROS_MESSAGE_PIDGAINSMSG_H
